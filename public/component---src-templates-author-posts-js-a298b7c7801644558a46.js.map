{"version":3,"sources":["webpack:///./src/templates/author-posts.js","webpack:///./src/components/Post.js","webpack:///./src/util/authors.js","webpack:///./node_modules/core-js/modules/es6.array.find.js"],"names":["authorQuery","authorPosts","data","pageContext","totalCount","allMarkdownRemark","author","authors","find","x","name","authorName","pageHeader","pageTitle","postAuthor","authorImageFluid","file","childImageSharp","fluid","edges","map","node","key","id","slug","fields","title","frontmatter","date","body","excerpt","tags","image","className","src","alt","style","width","Post","to","tag","slugify","color","module","exports","imageUrl","bio","facebook","twitter","google","linkedin","$export","$find","forced","Array","P","F","callbackfn","this","arguments","length","undefined"],"mappings":"6OAiDaA,EAAW,aAwCTC,UAlFK,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACjBC,EAAeF,EAAKG,kBAApBD,WACFE,EAASC,IAAQC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,OAASP,EAAYQ,cAClDC,EAAgBR,EAAN,cAA8BD,EAAYQ,WAE1D,OAEI,kBAAC,IAAD,CAAQE,UAAWD,EAEfE,WAAYR,EACZS,iBAAkBb,EAAKc,KAAKC,gBAAgBC,OAC3ChB,EAAKG,kBAAkBc,MAAMC,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OAE9B,kBAAC,IAAD,CACIC,IAAKD,EAAKE,GACVC,KAAMH,EAAKI,OAAOD,KAClBE,MAAOL,EAAKM,YAAYD,MACxBpB,OAAQe,EAAKM,YAAYrB,OACzBsB,KAAMP,EAAKM,YAAYC,KACvBC,KAAMR,EAAKS,QACXC,KAAMV,EAAKM,YAAYI,KACvBb,MAAOG,EAAKM,YAAYK,MAAMf,gBAAgBC,WAItD,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAWe,UAAU,8BAArB,eAGA,yBACIC,IAAI,qCACJC,IAAI,SACJC,MAAO,CAAEC,MAAO,e,iCCxCxC,4GAsCeC,IA/BF,SAAC,GAAD,IAAGZ,EAAH,EAAGA,MAAOpB,EAAV,EAAUA,OAAQkB,EAAlB,EAAkBA,KAAMI,EAAxB,EAAwBA,KAAMC,EAA9B,EAA8BA,KAAMX,EAApC,EAAoCA,MAAOa,EAA3C,EAA2CA,KAA3C,OACT,kBAAC,IAAD,KACI,kBAAC,OAAD,CAAMQ,GAAIf,GACN,kBAAC,IAAD,CAAKS,UAAU,iBAAiBf,MAAOA,KAE3C,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,OAAD,CAAMqB,GAAIf,GAAV,IAAkBE,EAAlB,MAEJ,kBAAC,IAAD,KACI,0BAAMO,UAAU,aAAhB,IAA8BL,EAA9B,KADJ,OACoD,IAChD,0BAAMK,UAAU,aAAhB,IAA8B3B,EAA9B,MAEJ,kBAAC,IAAD,KAAWuB,GACX,wBAAII,UAAU,aACTF,EAAKX,KAAI,SAAAoB,GAAG,OACT,wBAAIlB,IAAKkB,GACL,kBAAC,OAAD,CAAMD,GAAE,QAAUE,kBAAQD,IACtB,kBAAC,IAAD,CAAOE,MAAM,UAAUT,UAAU,kBAC5BO,SAMrB,kBAAC,OAAD,CAAMD,GAAIf,EAAMS,UAAU,sDAA1B,sB,kBCTZU,EAAOC,QAvBS,CACZ,CACIlC,KAAM,YACNmC,SAAU,eACVC,IAAK,6BACLC,SAAU,4BACVC,QAAS,uBACTC,OAAQ,2BACRC,SAAU,6BAGd,CACIxC,KAAM,YACNmC,SAAU,eACVC,IAAK,qCACLC,SAAU,4BACVC,QAAS,uBACTC,OAAQ,2BACRC,SAAU,+B,iCChBlB,IAAIC,EAAU,EAAQ,GAClBC,EAAQ,EAAQ,GAAR,CAA4B,GAEpCC,GAAS,EADH,QAGC,IAAIC,MAAM,GAAM,MAAE,WAAcD,GAAS,KACpDF,EAAQA,EAAQI,EAAIJ,EAAQK,EAAIH,EAAQ,QAAS,CAC/C7C,KAAM,SAAciD,GAClB,OAAOL,EAAMM,KAAMD,EAAYE,UAAUC,OAAS,EAAID,UAAU,QAAKE,MAGzE,EAAQ,GAAR,CATU","file":"component---src-templates-author-posts-js-a298b7c7801644558a46.js","sourcesContent":["import React from 'react'\nimport Layout from '../components/layout'\nimport { Card, CardBody, CardTitle } from 'reactstrap'\nimport Post from '../components/Post'\nimport { graphql } from 'gatsby'\nimport authors from '../util/authors'\n\nconst authorPosts = ({ data, pageContext }) => {\n    const { totalCount } = data.allMarkdownRemark\n    const author = authors.find(x => x.name === pageContext.authorName)\n    const pageHeader = `${totalCount} Posts by: ${pageContext.authorName}`\n\n    return (\n\n        <Layout pageTitle={pageHeader}\n\n            postAuthor={author}\n            authorImageFluid={data.file.childImageSharp.fluid}>\n            {data.allMarkdownRemark.edges.map(({ node }) => (\n\n                <Post\n                    key={node.id}\n                    slug={node.fields.slug}\n                    title={node.frontmatter.title}\n                    author={node.frontmatter.author}\n                    date={node.frontmatter.date}\n                    body={node.excerpt}\n                    tags={node.frontmatter.tags}\n                    fluid={node.frontmatter.image.childImageSharp.fluid}\n                />\n            ))}\n\n            <Card>\n                <CardBody>\n                    <CardTitle className=\"text-center text-uppercase\">\n                        PUBLICIDADE\n                     </CardTitle>\n                    <img\n                        src=\"https://via.placeholder.com/320x50\"\n                        alt=\"Advert\"\n                        style={{ width: \"100%\" }}\n                    />\n                </CardBody>\n            </Card>\n\n        </Layout>\n    )\n}\n\nexport const authorQuery = graphql`\n    query($authorName: String!, $imageUrl: String!) {\n        allMarkdownRemark(\n            sort: { fields: [frontmatter___date], order: DESC}\n            filter: { frontmatter: { author: { eq: $authorName } } }\n        ) {\n            totalCount\n            edges{\n                node{\n                    id\n                    frontmatter {\n                        title\n                        date(formatString: \"MMMM Do YYYY\")\n                        author\n                        tags\n                        image {\n                            childImageSharp{\n                                fluid(maxWidth: 650){\n                                    ...GatsbyImageSharpFluid\n                                }\n                            }\n                        }\n                    }\n                    fields {\n                        slug\n                    }\n                    excerpt\n                }\n            }\n        }\n        file(relativePath: { eq: $imageUrl }) {\n            childImageSharp {\n                fluid(maxWidth: 300) {\n                    ...GatsbyImageSharpFluid\n                }\n            }\n        }\n    }\n`\n\nexport default authorPosts","import React from 'react'\nimport { Badge, Card, CardTitle, CardText, CardSubtitle, CardBody } from 'reactstrap'\nimport { Link } from 'gatsby'\nimport Img from 'gatsby-image'\nimport { slugify } from '../util/utilityFunctions'\n\n\nconst Post = ({ title, author, slug, date, body, fluid, tags }) => (\n    <Card>\n        <Link to={slug}>\n            <Img className=\"card-image-top\" fluid={fluid} />\n        </Link>\n        <CardBody>\n            <CardTitle>\n                <Link to={slug}> {title} </Link>\n            </CardTitle>\n            <CardSubtitle>\n                <span className=\"text-info\"> {date} </span> by {' '}\n                <span className=\"text-info\"> {author} </span>\n            </CardSubtitle>\n            <CardText>{body}</CardText>\n            <ul className=\"post-tags\">\n                {tags.map(tag => (\n                    <li key={tag}>\n                        <Link to={`/tag/${slugify(tag)}`}>\n                            <Badge color=\"primary\" className=\"text-uppercase\">\n                                {tag}\n                            </Badge>\n                        </Link>\n                    </li>\n                ))}\n            </ul>\n            <Link to={slug} className=\"btn btn-outline-primary float-right text-uppercase\" > Veja Mais... </Link>\n        </CardBody>\n    </Card>\n)\n\n\nexport default Post","const authors = [\n    {\n        name: 'Post News',\n        imageUrl: 'postNews.png',\n        bio: 'Posts de notícias diárias.',\n        facebook: 'https://www.facebook.com/',\n        twitter: 'https://twitter.com/',\n        google: 'https://plus.google.com/',\n        linkedin: 'https://www.linkedin.com/',\n        //instagram: 'https://www.instagram.com/',\n    },\n    {\n        name: 'Post Tech',\n        imageUrl: 'postTech.png',\n        bio: 'Post de notícias sobre Tecnologia.',\n        facebook: 'https://www.facebook.com/',\n        twitter: 'https://twitter.com/',\n        google: 'https://plus.google.com/',\n        linkedin: 'https://www.linkedin.com/',\n        //instagram: 'https://www.instagram.com/',\n    },\n]\n\nmodule.exports = authors","'use strict';\n// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(5);\nvar KEY = 'find';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  find: function find(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n"],"sourceRoot":""}